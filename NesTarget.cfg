MEMORY {
    HEADER:   start = $0000, size = $0010, type = ro, file = %O, fill = yes, fillval = $ff;
    ZEROPAGE: start = $00,   size = $0100, type = rw, file = "";
    STACK:    start = $0100, size = $0100, type = rw, file = ""; # C stack location
    OAM:      start = $0200, size = $0100, type = rw, file = "";
    RAM:      start = $0300, size = $0500, type = rw, file = "";
    CODE:     start = $8000, size = $4000, type = ro, file = %O, fill = yes, fillval = $ff;
    SONG1:    start = $c000, size = $1000, type = ro, file = %O, fill = yes, fillval = $ff;
    SONG2:    start = $d000, size = $1000, type = ro, file = %O, fill = yes, fillval = $ff;
    DPCM:     start = $e000, size = $1FFA, type = ro, file = %O, fill = yes, fillval = $ff;
    VECTORS:  start = $fffa, size = $6, file = %O, fill = yes;
    BANK1:  start = $0000, size = $2000, type = ro, file = %O,  bank = $00;
    BANK2:  start = $0000, size = $2000, type = ro, file = %O,  bank = $01;

}

SEGMENTS {
    HEADER:   load = HEADER,   type = ro;
    ZEROPAGE: load = ZEROPAGE, type = zp;
    OAM:      load = OAM,      type = bss, align = $100;
    RAM:      load = RAM,      type = bss;
    BSS:      load = RAM,      type = bss;
    DATA:       load = CODE,     run = RAM,  type = rw,  define = yes;
    CODE:       load = CODE,     type = ro;
    SONG1:      load = SONG1,    type = ro;
    SONG2:      load = SONG2,    type = ro;
    DPCM:       load = DPCM,     type = ro;
    VECTORS:    load = VECTORS,  type = ro,  start = $FFFA;
    CHARS:      load = BANK1,    type = ro;
    LEVEL1:     load = BANK1,   type = ro;
    LEVEL2:     load = BANK2,   type = ro;

}

# SYMBOLS {
#     # Define a few linker symbols for the C stack location
#     __STACKSIZE__:   type = weak, value = $00FF;     # 1 page stack
# 	__STACK_START__: type = weak, value = $0100;
# }